---
title: "跨域问题"
layout: post
date: 2017-03-20 18:37
image: /assets/images/markdown.jpg
headerImage: false
tag:
- JavaScript
star: true
category: blog
author: Listen
description: 
---
## 同源
同源政策的目的是保证用户信息的安全，防止恶意窃取网站数据。那么什么是同源？同源指的是三个相同。
1. 协议相同
2. 域名相同
3. 端口相同

## 不同源会怎样
如果非同源，三种行为将受限制。
1. Cookie、LocalStorage和IndexDB无法读取。
2. DOM无法获取。
3. AJAX请求不能发送。

## 跨域的页面如何进行同源操作
### Cookie
如果两个网页只是二级域名不同的话可以通过设置<code class="mycode">document.domain</code>，只要设置相同的<code class="mycode">document.domain</code>两个网页就可以共享Cookie。
需要<attention>注意</attention>的是，这种方法只适用于Cookie及iframe窗口，LocalStorage及IndexDB无法通过此方法规避同源政策。<attention>另外</attention>，服务器可以在设定Cookie时指定Cookie所属的域名为一级域名，这样二级域名与三级域名不用做任何设置都可以读取到这个Cookie，如：
{% highlight javascript %}
Set-Cookie: key=value; domain=.example.com; path=/
{% endhighlight %}

### iframe
如果iframe窗口与window.open()打开的窗口与父窗口不同源，则两者之间是不能通信的。如果一级域名相同，只是二级域名不同的话可以通过设置<code class="mycode">document.domain</code>的方法规避同源政策。如果网站完全不同源，则使用三种方法解决跨域窗口的通信问题。
1. 片段识别符（fragment identifier）
2. window.name
3. 跨文档通信API(Cross-document messaging)

#### 片段识别符
片段识别符指的是url中#后面的那部分，比如<code class="mycode">http://Listen.com/index.html#fragment</code>中的<code class="mycode">#fragment</code>。改变片段识别符页面是不会刷新的。父窗口可以把信息写入子窗口的片段标识符中，从而达到传送信息的目的。
{% highlight javascript %}
var src = baseUrl + "#" + data;
document.getElementById("iframe").src = src;
{% endhighlight %}
在子窗口中可以通过监听<code class="mycode">hashchange</code>事件进行获取数据。
{% highlight javascript %}
window.onhashchange = function(){
	var data = window.location.hash;
}
{% endhighlight %}
同样子窗口可以改变父窗口的片段标识符。
{% highlight javascript %}
parent.location.href = target + "#" + data;
{% endhighlight %}

#### window.name
name值在不同的页面（甚至不同域）加载后依然存在，并且可以支持非常长的name值（2MB）。name在浏览器环境中是一个全局/window对象的属性，且当在frame中加载新页面时，name的属性值依旧保持不变。通过在iframe中加载一个资源并设置name属性，此name属性值可以被获取到。但是name属性只能被同域的frame访问，所以当不同域的iframe页面被加载后，必须导航frame回到原始域，才可以被访问。<br>
父窗口打开一个不同源的子窗口，在子窗口中将信息写入name属性中。
{% highlight javascript %}
window.name = data;
{% endhighlight %}
接着子窗口跳回到一个与主窗口同域的网址。
{% highlight javascript %}
location.href = "http://parent.url.com/xxx.html";
{% endhighlight %}
然后在主窗口就可以读取子窗口的window.name了。
{% highlight javascript %}
var data = document.getElementById("iframe").contentWindow.name;
{% endhighlight %}

#### window.postMessage
HTML5引入了一个全新的API：<attention>跨文档通信API（Cross-document messaging）</attention>。其为window对象提供了一个window.postMessage方法，允许跨窗口通信，无论窗口是否同源。比如父窗口http://aaa.com向子窗口http://bbb.com发送消息：
{% highlight javascript %}
var child = window.open("http://bbb.com");
child.postMessage("Hello World","http://bbb.com");
{% endhighlight %}
postMessage方法的第一个参数是具体的数据，第二个参数是接收消息的窗口的源，即
"协议 + 域名 + 端口"，也可以设置为*，表示不限制域名，向所有窗口发送。然后其他窗口可以通过message事件监听对方的消息。
{% highlight javascript %}
window.addEventListener("message",function(e){
	console.log(e.data);//Hello World
},false);
{% endhighlight %}
message事件的事件对象event有三个属性：
1. event.source: 发送消息的窗口。
2. event.origin: 消息发向的网址。
3. event.data: 消息内容。

使用postMessage需要<attention>注意</attention>的几点是：
1. 并不是随便两个网页都能通信，只有窗口是以iframe的形式存在于另一个窗口，或者一个窗口是另一个窗口通过<code class="mycode">window.open()</code>或者超链接的形式打开（超链接打开同样可以使用window.opener获取源窗口）。也就是说必须能获取目标窗口的引用才可以。引用一般可以是以下几种方式：
* window.frames[0]
* document.getElementsByTagName("iframe")[0].contentWindow
* window.opener
* window.open返回的引用
* event.source
2. HTML5规范中提到参数可以是JS的任意基本类型或可复制对象，但并不是所有浏览器都能做到这一点，部分浏览器只能处理字符串参数。所以在传递参数是可以使用JSON.stringify()对对象参数进行序列化。
3. postMessage（）方法的第二个参数可以是目标窗口的源，可以是*，如果想指定与当前窗口同源的话可以设置为"/"。

#### LocalStorage
有了postMessage，访问其他窗口的LocalStorage也就成了可能，这里给出例子。
父窗口发送消息：
{% highlight javascript %}
var win = document.getElementsByTagName('iframe')[0].contentWindow;
var obj = { name: 'Jack' };
// 存入对象
win.postMessage(JSON.stringify({key: 'storage', method: 'set', data: obj}), 'http://bbb.com');
// 读取对象
win.postMessage(JSON.stringify({key: 'storage', method: "get"}), "*");
window.onmessage = function(e) {
  if (e.origin != 'http://aaa.com') return;
  // "Jack"
  console.log(JSON.parse(e.data).name);
};
{% endhighlight %}
子窗口接收消息：
{% highlight javascript %}
window.onmessage = function(e) {
  if (e.origin !== 'http://bbb.com') return;
  var payload = JSON.parse(e.data);
  switch (payload.method) {
    case 'set':
      localStorage.setItem(payload.key, JSON.stringify(payload.data));
      break;
    case 'get':
      var parent = window.parent;
      var data = localStorage.getItem(payload.key);
      parent.postMessage(data, 'http://aaa.com');
      break;
    case 'remove':
      localStorage.removeItem(payload.key);
      break;
  }
};
{% endhighlight %}

### AJAX
同源政策规定，AJAX请求只能发送给同源的网址。除了架设服务器代理（浏览器请求同源服务器，在由后者请求外部服务），有三种方法规避这个限制。
1. JSONP
2. WebSocket
3. CORS

#### JSONP
JSONP是服务器与客户端跨域通信的常用方法，它的基本思想是网页通过添加一个<code class="mycode">script</code>元素,由它向跨域网址发送请求。
{% highlight javascript %}
function addScript(){
	var script = document.createElement("script");
	script.type = "text/javascript";
	script.src = "http://Listen.com/data?callback=getData";
	document.getElementsByTagName("Head")[0].appendChild(script);
}
function getData(data){
	console.log(data);
}

addScript();
{% endhighlight %}
上面代码通过动态添加<code class="mycode">script</code>元素，向服务器请求资源。在查询字符串中有一个<code class="mycode">callback</code>参数，用来指定回调函数，这个是JSONP必须的。服务器收到这个请求后，会将数据放在回调函数的参数位置返回：
{% highlight javascript %}
getData({"name":Listen,"age":24});
{% endhighlight %}
如此，返回后就会自动运行getData函数。需要<attention>注意</attention>的是该方法只能发送发送GET请求，也就是只能从服务器端获取资源。

#### WebSocket
详细请看参考资料《浏览器同源政策及其规避方法》。
#### CORS
跨源资源访问（Cross-Origin Resource Sharing）。对于这部分的知识还是看阮一峰老师的
博客吧~ [地址](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)

## 参考资料
1. [浏览器同源政策及其规避方法-阮一峰](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)
2. [JS跨域解决方式window.name-me春天](http://www.cnblogs.com/lichuntian/p/4909465.html)
3. [html5 postMessage解决跨域、跨窗口消息传递](http://www.cnblogs.com/dolphinX/p/3464056.html)